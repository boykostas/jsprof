'use strict';

// Задание 1
// Представьте, что у вас есть класс для управления библиотекой. В этом классе будет приватное свойство для хранения списка книг, а также методы для добавления книги, удаления книги и получения информации о наличии книги.

// Класс должен содержать приватное свойство #books, которое инициализируется пустым массивом и представляет собой список книг в библиотеке.

// Реализуйте геттер allBooks, который возвращает текущий список книг.

// Реализуйте метод addBook(title), который позволяет добавлять книгу в список. Если книга с таким названием уже существует в списке, выбросьте ошибку с соответствующим сообщением.

// Реализуйте метод removeBook(title), который позволит удалять книгу из списка по названию. Если книги с таким названием нет в списке, выбросьте ошибку с соответствующим сообщением.

// Реализуйте метод hasBook(title), который будет проверять наличие книги в библиотеке и возвращать true или false в зависимости от того, есть ли такая книга в списке или нет.

// Реализуйте конструктор, который принимает начальный список книг (массив) в качестве аргумента. Убедитесь, что предоставленный массив не содержит дубликатов; в противном случае выбрасывайте ошибку.

class Library {
    // Приватное свойство для хранения списка книг
    #books;

    // Конструктор, который принимает начальный список книг
    constructor(initialBooks = []) {
        // Проверка на дубликаты в начальном списке
        const hasDuplicates = new Set(initialBooks).size !== initialBooks.length;
        if (hasDuplicates) {
            throw new Error("Начальный список содержит дубликаты книг.");
        }

        // Инициализация приватного свойства #books
        this.#books = [...initialBooks];
    }

    // Геттер для получения текущего списка книг
    get allBooks() {
        return [...this.#books];  // Возвращаем копию списка, чтобы избежать прямого изменения
    }

    // Метод для добавления книги
    addBook(title) {
        if (this.hasBook(title)) {
            throw new Error(`Книга "${title}" уже существует в библиотеке.`);
        }
        this.#books.push(title);
    }

    // Метод для удаления книги
    removeBook(title) {
        const bookIndex = this.#books.indexOf(title);
        if (bookIndex === -1) {
            throw new Error(`Книга "${title}" не найдена в библиотеке.`);
        }
        this.#books.splice(bookIndex, 1);  // Удаляем книгу по индексу
    }

    // Метод для проверки наличия книги
    hasBook(title) {
        return this.#books.includes(title);
    }
}

// Пример использования
try {
    const myLibrary = new Library(['1934', 'Как заколялась сталь']);
    console.log(myLibrary.allBooks);  

    myLibrary.addBook('Братья Карамазовы');
    console.log(myLibrary.allBooks);  

    console.log(myLibrary.hasBook('1934')); 

    myLibrary.removeBook('Как заколялась сталь');
    console.log(myLibrary.allBooks);  


} catch (error) {
    console.error(error.message);
}
